{"version":3,"sources":["components/Uploader.js","components/Tips.js","pages/Home.js"],"names":["Dragger","Upload","Result","styled","div","H1","h1","Image","img","Component","observer","useStores","ImageStore","UserStore","ref1","useRef","ref2","store","useLocalStore","width","setWidth","height","setHeight","serverFile","attributes","url","widthStr","heightStr","props","showUploadList","beforeUpload","file","setFile","setFilename","name","currentUser","message","warning","window","test","type","size","error","upload","then","console","log","catch","tip","spinning","isUpoading","className","InboxOutlined","target","href","filename","src","ref","onChange","current","value","placeholder","bindHeightChange","fullStr","Tips","children","Home","Uploader"],"mappings":"uOAOQA,EAAYC,IAAZD,QAEFE,EAASC,IAAOC,IAAV,uGAKNC,EAAIF,IAAOG,GAAT,0EAIFC,EAAOJ,IAAOK,IAAT,mDAwHIC,EAjHGC,aAAS,WAAO,IAAD,EACKC,cAA1BC,EADqB,EACrBA,WAAYC,EADS,EACTA,UACdC,EAAOC,mBACPC,EAAOD,mBAIPE,EAAQC,aAAc,iBAAO,CAC/BC,MAAO,KACPC,SAF+B,SAEtBD,GACLF,EAAME,MAAQA,GAElB,eACI,OAAOF,EAAME,MAAN,aAAkBF,EAAME,OAAU,IAE7CE,OAAO,KACPC,UAT+B,SASrBD,GACNJ,EAAMI,OAASA,GAEnB,gBACI,OAAOJ,EAAMI,OAAN,aAAmBJ,EAAMI,QAAW,IAE/C,cAEI,OAAOT,EAAWW,WAAWC,WAAWC,IAAID,WAAWC,IAAM,gBAAkBR,EAAMS,SAAWT,EAAMU,eAcxGC,EAAQ,CACVC,gBAAgB,EAChBC,aAAc,SAAAC,GAGV,OAFAnB,EAAWoB,QAAQD,GACnBnB,EAAWqB,YAAYF,EAAKG,MACC,OAA1BrB,EAAUsB,aACTC,IAAQC,QAAQ,qDACT,IAIXC,OAAOP,KAAOA,EACV,wCAAwCQ,KAAKR,EAAKS,MAInDT,EAAKU,KAAO,SACXL,IAAQM,MAAM,+BACP,IAGX9B,EAAW+B,SACNC,MAAK,SAACrB,GACPsB,QAAQC,IAAI,4BACZD,QAAQC,IAAIvB,MACTwB,OAAM,WACTF,QAAQC,IAAI,gCAET,IAfHV,IAAQM,MAAM,0EACP,MAsBnB,OACI,gCACE,cAAC,IAAD,CAAMM,IAAI,qBAAMC,SAAUrC,EAAWsC,WAArC,SACE,eAAClD,EAAD,2BAAa4B,GAAb,cACI,oBAAGuB,UAAU,uBAAb,cAAqC,cAACC,EAAA,EAAD,OACrC,mBAAGD,UAAU,kBAAb,2EACA,mBAAGA,UAAU,kBAAb,uFAGR,8BAEYvC,EAAWW,WAAa,eAACrB,EAAD,WACpB,cAACG,EAAD,uCACA,+BACI,0DACA,6BAAI,mBAAGgD,OAAO,SAASC,KAAO1C,EAAWW,WAAWC,WAAWC,IAAID,WAAWC,IAA1E,SAAiFb,EAAWW,WAAWC,WAAWC,IAAID,WAAWC,QACrI,oDACA,6BAAKb,EAAW2C,WAChB,0DACA,6BACI,cAAChD,EAAD,CAAOiD,IAAK5C,EAAWW,WAAWC,WAAWC,IAAID,WAAWC,QAEhE,0DACA,+BAEI,uBAAOgC,IAAK3C,EAAM4C,SAvEtB,WACpBzC,EAAMG,SAASN,EAAK6C,QAAQC,QAsEyCC,YAAY,qDACzD,uBAAOJ,IAAKzC,EAAM0C,SApErB,SAAnBI,IACFjB,QAAQC,IAAIgB,GACZjB,QAAQC,IAAI9B,EAAK2C,SACjB1C,EAAMK,UAAUN,EAAK2C,QAAQC,QAiEyCC,YAAY,wDAE9D,6BACI,mBAAGR,OAAO,SAASC,KAAMrC,EAAM8C,QAA/B,SAAyC9C,EAAM8C,kBAG/C,aC9H1BC,EAAO7D,IAAOC,IAAV,yIAoBKK,EAZGC,aAAS,YAAiB,IAAfuD,EAAc,EAAdA,SACjBpD,EAAcF,cAAdE,UACR,OACI,mCAEQA,EAAUsB,YAAc,KAAO,eAAC6B,EAAD,eAAQC,EAAR,YCZzCC,EAAOxD,aAAS,WACEC,cAAdE,UAIR,OACE,qCAEM,cAAC,EAAD,0DAEF,cAACsD,EAAD,UAQOD","file":"static/js/9.e6ebdecf.chunk.js","sourcesContent":["import React, { useRef } from 'react';\r\nimport { useStores } from '../stores';\r\nimport { observer, useLocalStore } from 'mobx-react';\r\nimport { Upload, message, Spin } from 'antd';       \r\nimport { InboxOutlined } from '@ant-design/icons'; //引入图标\r\nimport styled from 'styled-components';\r\n\r\nconst { Dragger } = Upload;          //引入upload中的Dragger\r\n\r\nconst Result = styled.div`\r\n    margin-top: 30px;\r\n    border: 1px dahser #ccc;\r\n    padding: 20px;  \r\n`;\r\nconst H1 =styled.h1`\r\n    margin: 20px 0;\r\n    text-align: center;\r\n`;\r\nconst Image =styled.img`\r\n    max-width: 300px;\r\n`;\r\n\r\n\r\n//对于 props， beforeUpload，Dragger 之间的关系：beforeUpload 相当于是 作为 Dragger 的属性，但因为代码太多了，把 beforeUpload 变成一个对象props，然后把 props 进行解构所以有props\r\n\r\nconst Component = observer(() => {\r\n    const { ImageStore, UserStore } = useStores(); \r\n    const ref1 = useRef();\r\n    const ref2 = useRef();\r\n\r\n    //给 {} 加括号是因为这样返回的是一个对象，加了之后不是一个 箭头函数的 函数体，而是 返回的一个值，对象\r\n    // 加 ref 定位到当前状态，可以改变尺寸\r\n    const store = useLocalStore(() => ({        \r\n        width: null,\r\n        setWidth(width) {\r\n            store.width = width;\r\n        },\r\n        get widthStr() {\r\n            return store.width?`/w/${store.width}` : '';          \r\n        },\r\n        height:null,\r\n        setHeight(height) {\r\n            store.height = height;\r\n        },\r\n        get heightStr() {\r\n            return store.height?`/h/${store.height}` : '';\r\n        },\r\n        get fullStr() {\r\n            //?imageView2/0/w/800/h/400),给图片地址加 后缀w/800/h/400 可以改变图片大小\r\n            return ImageStore.serverFile.attributes.url.attributes.url + '?imageView2/0' + store.widthStr + store.heightStr\r\n        }\r\n    }));\r\n\r\n    const bindWidthChange = () => {\r\n        store.setWidth(ref1.current.value);\r\n    };\r\n    //让 const bindWidthChange 去绑定 ref， 然后绑定调动  setWidth 函数\r\n    const bindHeightChange = () => {\r\n        console.log(bindHeightChange);\r\n        console.log(ref2.current);\r\n        store.setHeight(ref2.current.value);\r\n    };\r\n\r\n    const props = {\r\n        showUploadList: false,\r\n        beforeUpload: file => {       //beforeUpload 的状态 true 决定是否上传成功\r\n            ImageStore.setFile(file);\r\n            ImageStore.setFilename(file.name);      // 将 file，filename的数据存进去\r\n            if(UserStore.currentUser === null) {\r\n                message.warning('请先登录再上传！');\r\n                return false;   \r\n                //必须要 return false; 不然后面的就直接自动上传，不会有全局警告出现了\r\n            }\r\n            //上传后，把文件file变为全局变量，可以直接去控制台输入file看 file有哪些信息\r\n            window.file = file     //这里的 ig 是不分大小写的意思\r\n            if(!/(svg$)|(png$)|(jpg$)|(jpeg$)|(gif$)/ig.test(file.type)) {\r\n                message.error('只能上传png/svg/jpg/gif格式的图片');\r\n                return false;\r\n            }\r\n            if(file.size > 1024*1024) {\r\n                message.error('图片最大1M');\r\n                return false;\r\n            }\r\n\r\n            ImageStore.upload()\r\n                .then((serverFile)=>{\r\n                console.log('上传成功')\r\n                console.log(serverFile);\r\n                }).catch(()=>{\r\n                console.log('上传失败')\r\n                });\r\n            return false;\r\n        }\r\n    };  \r\n\r\n    //  这个文件是自由选择，不受控制，是一个非受控组件，这里用 useRef 做一个处理，将ref 给这个选中的文件做一个标记，这样可以使用 ref 随时定位到这个文件\r\n    \r\n    // 为了调试方便，这里在控制台输入 file.files或者file.files[0]就可以找到这个文件及信息,其中数组[0]代表第一个file\r\n   \r\n    return (\r\n        <div>\r\n          <Spin tip=\"上传中\" spinning={ImageStore.isUpoading}>\r\n            <Dragger {...props}>\r\n                <p className=\"ant-upload-drag-icon\"> <InboxOutlined /></p>\r\n                <p className=\"ant-upload-text\">点击或者拖拽上传图片 </p>\r\n                <p className=\"ant-upload-hint\">仅支持.png/.svg/.jpg/.gif格式的图片</p>\r\n            </Dragger>\r\n          </Spin>\r\n        <div>\r\n                {\r\n                    ImageStore.serverFile ? <Result> \r\n                        <H1>上传结果</H1>\r\n                        <dl>\r\n                            <dt>线上地址</dt>\r\n                            <dd><a target=\"_blank\" href={ ImageStore.serverFile.attributes.url.attributes.url }>{ImageStore.serverFile.attributes.url.attributes.url}</a></dd>\r\n                            <dt>文件名</dt>\r\n                            <dd>{ImageStore.filename}</dd>\r\n                            <dt>图片预览</dt>\r\n                            <dd>\r\n                                <Image src={ImageStore.serverFile.attributes.url.attributes.url} />\r\n                            </dd>\r\n                            <dt>更多尺寸</dt>\r\n                            <dd>\r\n                                {/* 加ref 定位到当前状态，可以改变尺寸 */}\r\n                                <input ref={ref1} onChange={bindWidthChange} placeholder=\"最大宽度（可选）\" />\r\n                                <input ref={ref2} onChange={bindHeightChange} placeholder=\"最大高度（可选）\" />\r\n                            </dd>\r\n                            <dd>\r\n                                <a target=\"_blank\" href={store.fullStr}>{store.fullStr}</a>\r\n                            </dd>\r\n                        </dl>\r\n                    </Result> : null\r\n                }\r\n            </div>\r\n        </div>\r\n    );      \r\n});\r\n\r\nexport default Component;","import React from 'react';\r\nimport { useStores } from '../stores';\r\nimport { observer } from 'mobx-react';\r\nimport styled from 'styled-components';\r\n\r\nconst Tips = styled.div`\r\n    background: orange;\r\n    padding: 10px;\r\n    margin: 30px 0;\r\n    color: #fff;\r\n    border-radius: 4px;\r\n`;\r\n\r\nconst Component = observer(({children}) => {\r\n    const { UserStore } = useStores();             // 得到 UserStore ，在下面做一个判断\r\n    return (\r\n        <>\r\n            {\r\n                UserStore.currentUser ? null : <Tips> {children} </Tips>\r\n                //实现功能,判断是否有用户存在，即是否有用户登录？\r\n            }\r\n        </>\r\n    );\r\n});\r\n    \r\nexport default Component;","import React from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { useStores } from '../stores';\r\nimport Uploader from '../components/Uploader';\r\nimport Tips from '../components/Tips';\r\n\r\nconst Home = observer(() => {         // 全用函数组件\r\n  const { UserStore } = useStores();\r\n\r\n  const User = () => <div> Hello {UserStore.currentUser.attribures.username} </div>\r\n\r\n  return (\r\n    <>\r\n        {\r\n          <Tips>请先登录再上传!</Tips>\r\n        } \r\n        <Uploader />\r\n    </>\r\n  );\r\n});\r\n   \r\n// 在组件render中，必须用一个标签包裹起来，即使是空标签\r\n\r\n\r\nexport default Home;    //导出"],"sourceRoot":""}